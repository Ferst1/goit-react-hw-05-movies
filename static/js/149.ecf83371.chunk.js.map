{"version":3,"file":"static/js/149.ecf83371.chunk.js","mappings":"2KA0BA,IArBmB,SAAHA,GAAoB,IAAdC,EAAMD,EAANC,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACEC,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,MAAAC,SACGJ,EAAOK,KAAI,SAAAC,GAAK,OACfH,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAACI,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAaH,EAAMI,IAAMC,MAAO,CAAEC,KAAMX,GAAWG,SACxDE,EAAMO,SAFFP,EAAMI,GAIV,OAKf,C,6HCsBA,EAvCmB,SAAHX,GAA6B,IAAvBe,EAAef,EAAfe,gBACpBC,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAM5BI,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAMC,GAAC,IAAAP,EAAA,OAAAK,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC1BH,EAAEI,iBACIX,EAAcO,EAAEK,cAAcC,SAASb,YAAYc,MACzD,IACEnB,EAAgB,CAAEoB,MAAOf,EAAYgB,QAGvC,CAFE,MAAOC,GACPC,QAAQD,MAAMA,EAChB,CAAC,wBAAAT,EAAAW,OAAA,GAAAb,EAAA,KACF,gBARiBc,GAAA,OAAAjB,EAAAkB,MAAA,KAAAC,UAAA,KAUlB,OACEC,EAAAA,EAAAA,MAAA,OAAAtC,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,SAAI,kBACJsC,EAAAA,EAAAA,MAAA,QAAMC,SAAUtB,EAAajB,SAAA,EAC3BD,EAAAA,EAAAA,KAAA,SACEyC,KAAK,OACLC,KAAK,cACLZ,MAAOd,EACP2B,SAtBS,SAAApB,GACf,OAAON,EAAeM,EAAEqB,OAAOd,MACjC,EAqBQe,UAAQ,EACRC,YAAY,sBAEd9C,EAAAA,EAAAA,KAAA,UAAQyC,KAAK,SAAQxC,SAAC,gBAI9B,E,qDCKA,EAjCe,WACb,IAAAW,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CmC,EAAWjC,EAAA,GAAEkC,EAAclC,EAAA,GAClCmC,GAAkCpC,EAAAA,EAAAA,WAAS,GAAMqC,GAAAnC,EAAAA,EAAAA,GAAAkC,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAxC,EAAAA,EAAAA,GAAAsC,EAAA,GAAlDG,EAAYD,EAAA,GAAE5C,EAAe4C,EAAA,GAC9BxB,EAAQyB,EAAaC,IAAI,SACzBC,EAAO,sBAAApD,OAAyByB,GAmBtC,OAjBA4B,EAAAA,EAAAA,YAAU,WACH5B,IAGLqB,GAAa,IACbQ,EAAAA,EAAAA,GAAUF,GACPG,MAAK,SAAAC,GACJ,OAA8B,IAAvBA,EAAIC,QAAQC,OACfhB,EAAec,EAAIC,SACnBE,IAAAA,OAAAA,QAAwB,eAC9B,IACCC,OAAM,SAAAjC,GACLA,GAASgC,IAAAA,OAAAA,QAAwB,UAAD3D,OAAW2B,GAC7C,IACCkC,QAAQf,GAAa,IAC1B,GAAG,CAACM,EAAS3B,KAGXQ,EAAAA,EAAAA,MAAA,OAAAtC,SAAA,EACED,EAAAA,EAAAA,KAACoE,EAAU,CAACzD,gBAAiBA,KAC7BX,EAAAA,EAAAA,KAACqE,EAAAA,EAAU,CAACxE,OAAQkD,IACnBI,IAAanD,EAAAA,EAAAA,KAACsE,EAAAA,EAAM,MAG3B,C,qFCvCMC,EAAW,gCAEV,SAAeX,EAASxB,GAAA,OAAAoC,EAAAnC,MAAC,KAADC,UAAA,CAe9B,SAAAkC,IAAA,OAAAA,GAAApD,EAAAA,EAAAA,GAAAC,IAAAA,MAfM,SAAAC,EAAyBoC,GAAO,IAAAe,EAAA,OAAApD,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAQpC,OAPK+C,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAELrD,EAAAE,KAAA,EACYoD,MAAM,GAADxE,OAAIiE,GAAQjE,OAAGoD,GAAWe,GAASZ,MAAK,SAAAkB,GACxD,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MAClB,IAAG,KAAD,SAAA3D,EAAA4D,OAAA,SAAA5D,EAAA6D,MAAA,wBAAA7D,EAAAW,OAAA,GAAAb,EAAA,MACHe,MAAA,KAAAC,UAAA,C","sources":["components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","services/fetchMovie.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <div>\n      <ul>\n        {movies.map(movie => (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n\nexport default MoviesList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchForm = ({ setSearchParams }) => {\n  const [searchValue, setSearchValue] = useState('');\n\n  const onChange = e => {\n    return setSearchValue(e.target.value);\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const searchValue = e.currentTarget.elements.searchValue.value;\n    try {\n      setSearchParams({ query: searchValue.trim() });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Search Movie</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"searchValue\"\n          value={searchValue}\n          onChange={onChange}\n          required\n          placeholder=\"Input movie name\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    </div>\n  );\n};\n\nSearchForm.propTypes = {\n  setSearchParams: PropTypes.func.isRequired,\n};\n\nexport default SearchForm;\n","import React, { useEffect, useState } from 'react';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchData } from 'services/fetchMovie';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\n\nconst Movies = () => {\n  const [searchMovie, setSearchMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const pathUrl = `search/movie?query=${query}`;\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    setIsLoading(true);\n    fetchData(pathUrl)\n      .then(res => {\n        return res.results.length !== 0\n          ? setSearchMovie(res.results)\n          : Notiflix.Notify.failure(`Sorry, error`);\n      })\n      .catch(error => {\n        error && Notiflix.Notify.failure(`Sorry, ${error}`);\n      })\n      .finally(setIsLoading(false));\n  }, [pathUrl, query]);\n\n  return (\n    <div>\n      <SearchForm setSearchParams={setSearchParams} />\n      <MoviesList movies={searchMovie} />\n      {isLoading && <Loader />}\n    </div>\n  );\n};\n\nexport default Movies;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchData(pathUrl) {\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjYThhZDc3MjZkZTQ5ZTE4NmNkY2Q0ZDI5NDNmYmE4ZiIsInN1YiI6IjY1NDZhNmJhNWMwNzFiMDEwOTg2ZjRiZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.0-nbdYbpGetqHXvI-1FB0LVLeN8C_gUHTEMH1uJZEQY',\n    },\n  };\n  return await fetch(`${BASE_URL}${pathUrl}`, options).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\n"],"names":["_ref","movies","location","useLocation","_jsx","children","map","movie","Link","to","concat","id","state","from","title","setSearchParams","_useState","useState","_useState2","_slicedToArray","searchValue","setSearchValue","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","e","_context","prev","next","preventDefault","currentTarget","elements","value","query","trim","error","console","stop","_x","apply","arguments","_jsxs","onSubmit","type","name","onChange","target","required","placeholder","searchMovie","setSearchMovie","_useState3","_useState4","isLoading","setIsLoading","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","get","pathUrl","useEffect","fetchData","then","res","results","length","Notiflix","catch","finally","SearchForm","MoviesList","Loader","BASE_URL","_fetchData","options","method","headers","accept","Authorization","fetch","response","ok","Error","status","json","abrupt","sent"],"sourceRoot":""}