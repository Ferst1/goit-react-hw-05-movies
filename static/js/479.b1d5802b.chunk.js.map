{"version":3,"file":"static/js/479.b1d5802b.chunk.js","mappings":"+OAEaA,E,OAAWC,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iJ,2BCqDjC,EA7Ca,WACX,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACZI,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAkCP,EAAAA,EAAAA,WAAS,GAAMQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACxBG,EAAO,SAAAC,OAAYP,EAAO,YAahC,OAXAQ,EAAAA,EAAAA,YAAU,WACRH,GAAa,IACbI,EAAAA,EAAAA,GAAUH,GACPI,MAAK,SAAAC,GACJ,OAAOZ,EAAQY,EAAIb,KACrB,IACCc,OAAM,SAAAC,GACLA,GAASC,IAAAA,OAAAA,QAAwB,UAADP,OAAWM,GAC7C,IACCE,QAAQV,GAAa,GAC1B,GAAG,CAACC,KAEFU,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGnB,EAAKoB,OAAS,IACbC,EAAAA,EAAAA,KAAC7B,EAAQ,CAAA2B,SACNnB,EAAKsB,KAAI,SAAAtB,GAAI,OACZkB,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEE,EAAAA,EAAAA,KAAA,OACEE,IACEvB,EAAKwB,aAAY,mCAAAf,OACsBT,EAAKwB,cA5B5D,8EA+BcC,IAAKzB,EAAK0B,KACVC,MAAM,MACNC,OAAO,SAETP,EAAAA,EAAAA,KAAA,MAAAF,SAAKnB,EAAK0B,QACVR,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYnB,EAAK6B,eAZb7B,EAAK8B,GAaT,MAIM,IAAhB9B,EAAKoB,SAAgBC,EAAAA,EAAAA,KAAA,KAAAF,SAAG,gCACxBb,IAAae,EAAAA,EAAAA,KAACU,EAAAA,EAAM,MAG3B,C,qFCrDMC,EAAW,gCAEV,SAAerB,EAASsB,GAAA,OAAAC,EAAAC,MAAC,KAADC,UAAA,CAe9B,SAAAF,IAAA,OAAAA,GAAAG,EAAAA,EAAAA,GAAAC,IAAAA,MAfM,SAAAC,EAAyB/B,GAAO,IAAAgC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAQpC,OAPKH,EAAU,CACdI,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAELN,EAAAE,KAAA,EACYK,MAAM,GAADvC,OAAIuB,GAAQvB,OAAGD,GAAWgC,GAAS5B,MAAK,SAAAqC,GACxD,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MAClB,IAAG,KAAD,SAAAZ,EAAAa,OAAA,SAAAb,EAAAc,MAAA,wBAAAd,EAAAe,OAAA,GAAAjB,EAAA,MACHJ,MAAA,KAAAC,UAAA,C","sources":["components/Cast/Card.styled.js","components/Cast/Cast.jsx","services/fetchMovie.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CardList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  li {\n    margin: 10px 10px;\n    width: 160px;\n    height: 360px;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from 'components/Loader/Loader';\nimport { useParams } from 'react-router-dom';\nimport { fetchData } from 'services/fetchMovie';\nimport { CardList } from './Card.styled';\nimport Notiflix from 'notiflix';\n\nconst defaultImg =\n  'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const pathUrl = `movie/${movieId}/credits`;\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchData(pathUrl)\n      .then(res => {\n        return setCast(res.cast);\n      })\n      .catch(error => {\n        error && Notiflix.Notify.failure(`Sorry, ${error}`);\n      })\n      .finally(setIsLoading(false));\n  }, [pathUrl]);\n  return (\n    <div>\n      {cast.length > 0 && (\n        <CardList>\n          {cast.map(cast => (\n            <li key={cast.id}>\n              <img\n                src={\n                  cast.profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${cast.profile_path}`\n                    : defaultImg\n                }\n                alt={cast.name}\n                width=\"140\"\n                height=\"210\"\n              />\n              <h4>{cast.name}</h4>\n              <p>Character: {cast.character}</p>\n            </li>\n          ))}\n        </CardList>\n      )}\n      {cast.length === 0 && <p>Sorry, there are no results</p>}\n      {isLoading && <Loader />}\n    </div>\n  );\n};\n\nexport default Cast;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchData(pathUrl) {\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjYThhZDc3MjZkZTQ5ZTE4NmNkY2Q0ZDI5NDNmYmE4ZiIsInN1YiI6IjY1NDZhNmJhNWMwNzFiMDEwOTg2ZjRiZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.0-nbdYbpGetqHXvI-1FB0LVLeN8C_gUHTEMH1uJZEQY',\n    },\n  };\n  return await fetch(`${BASE_URL}${pathUrl}`, options).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\n"],"names":["CardList","styled","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","cast","setCast","movieId","useParams","_useState3","_useState4","isLoading","setIsLoading","pathUrl","concat","useEffect","fetchData","then","res","catch","error","Notiflix","finally","_jsxs","children","length","_jsx","map","src","profile_path","alt","name","width","height","character","id","Loader","BASE_URL","_x","_fetchData","apply","arguments","_asyncToGenerator","_regeneratorRuntime","_callee","options","_context","prev","next","method","headers","accept","Authorization","fetch","response","ok","Error","status","json","abrupt","sent","stop"],"sourceRoot":""}